name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Weekly build on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  REGISTRY: docker.io
  IMAGE_NAME: qonicsinc/postgres-pgcron

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [standard, alpine]
        include:
          - variant: standard
            dockerfile: Dockerfile
            tags: |
              qonicsinc/postgres-pgcron:17.5
              qonicsinc/postgres-pgcron:latest
          - variant: alpine
            dockerfile: Dockerfile.alpine
            tags: |
              qonicsinc/postgres-pgcron:17.5-alpine
              qonicsinc/postgres-pgcron:alpine

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=17.5,enable={{is_default_branch}}
          type=raw,value=latest,enable={{is_default_branch}},suffix=${{ matrix.variant == 'alpine' && '-alpine' || '' }}
          type=raw,value=alpine,enable={{is_default_branch}},condition=${{ matrix.variant == 'alpine' }}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image-${{ matrix.variant }}.tar

    - name: Load and test image
      run: |
        docker load --input /tmp/image-${{ matrix.variant }}.tar
        
        # Get the first tag for testing
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Testing image: $IMAGE_TAG"
        
        # Basic functionality test
        docker run --rm --name test-${{ matrix.variant }} \
          -e POSTGRES_PASSWORD=test123 \
          -e POSTGRES_DB=test_db \
          -d $IMAGE_TAG
        
        # Wait for PostgreSQL to be ready
        timeout 60s bash -c 'until docker exec test-${{ matrix.variant }} pg_isready -U postgres -d test_db; do sleep 2; done'
        
        # Test extensions
        docker exec test-${{ matrix.variant }} psql -U postgres -d test_db -c "
          CREATE EXTENSION IF NOT EXISTS pg_cron;
          CREATE EXTENSION IF NOT EXISTS pg_partman;
          SELECT extname, extversion FROM pg_extension WHERE extname IN ('pg_cron', 'pg_partman');
        "
        
        # Test pg_cron functionality
        docker exec test-${{ matrix.variant }} psql -U postgres -d test_db -c "
          SELECT cron.schedule('test-job', '*/5 * * * *', 'SELECT now();');
          SELECT jobname, schedule FROM cron.job;
        "
        
        # Test pg_partman functionality
        docker exec test-${{ matrix.variant }} psql -U postgres -d test_db -c "
          CREATE TABLE test_table (id SERIAL, created_at DATE) PARTITION BY RANGE (created_at);
          SELECT partman.create_parent('public.test_table', 'created_at', '1 month');
        "
        
        # Cleanup
        docker stop test-${{ matrix.variant }}
        
        echo "âœ… All tests passed for ${{ matrix.variant }} variant!"

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  update-docker-hub-description:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update Docker Hub Description
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.IMAGE_NAME }}
        readme-filepath: ./README.md
